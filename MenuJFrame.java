/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Default_package;

import geometry.*;
import java.awt.FileDialog;
import java.awt.Frame;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Santosh
 */
public class MenuJFrame extends javax.swing.JFrame {

    /**
     * Creates new form MenuJFrame
     */
    public MenuJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TextArea = new javax.swing.JTextArea();
        MenuBar = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        NewFileMenu = new javax.swing.JMenuItem();
        OpenFileMenu = new javax.swing.JMenuItem();
        SaveFileMenu = new javax.swing.JMenuItem();
        ExitFileMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TextArea.setColumns(20);
        TextArea.setRows(5);
        jScrollPane1.setViewportView(TextArea);

        FileMenu.setText("File");

        NewFileMenu.setText("New");
        NewFileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewFileMenuActionPerformed(evt);
            }
        });
        FileMenu.add(NewFileMenu);

        OpenFileMenu.setText("Open");
        OpenFileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenFileMenuActionPerformed(evt);
            }
        });
        FileMenu.add(OpenFileMenu);

        SaveFileMenu.setText("Save");
        SaveFileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveFileMenuActionPerformed(evt);
            }
        });
        FileMenu.add(SaveFileMenu);

        ExitFileMenu.setText("Exit");
        ExitFileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitFileMenuActionPerformed(evt);
            }
        });
        FileMenu.add(ExitFileMenu);

        MenuBar.add(FileMenu);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 278, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NewFileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewFileMenuActionPerformed
        // TODO add your handling code here:
        ArrayList<Geom> geomList = new ArrayList();
        TextArea.setText(null);
    }//GEN-LAST:event_NewFileMenuActionPerformed

    private void OpenFileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenFileMenuActionPerformed
        // TODO add your handling code here:
        TextArea.setText(null);
        FileDialog fd = new FileDialog(new Frame(), "Choose a file", FileDialog.LOAD);
        fd.setFile("*.txt");
        fd.setVisible(true);
        String filename = fd.getFile();
        String dir = fd.getDirectory();
        if (filename == null) {
            TextArea.append("you cancelled open selection" + "\n");
        } 

///=========================================reading the file====================================
        ArrayList<Geom> geomList = new ArrayList();
        try (BufferedReader br = new BufferedReader(new FileReader(dir + filename))) {

            String line;
            while ((line = br.readLine()) != null) {

                TextArea.append(line + "\n");
                br.mark(10);
                String word = line.trim();
                if (word.equalsIgnoreCase("Sphere")) {
                    Geom geom = new Sphere(0.0);
                    geom.read(br);
                    geomList.add(geom);
                } else if (word.equalsIgnoreCase("Cylinder")) {
                    Geom geom = new Cylinder(0.0, 0.0);
                    geom.read(br);
                    geomList.add(geom);
                } else if (word.equalsIgnoreCase("Cube")) {
                    Geom geom = new Cube(0.0);
                    geom.read(br);
                    geomList.add(geom);
                } else if (word.equalsIgnoreCase("Square")) {
                    Geom geom = new Square(0.0, 0.0);
                    geom.read(br);
                    geomList.add(geom);
                } else if (word.equalsIgnoreCase("Rectangle")) {
                    Geom geom = new Rectangle(0.0, 0.0, 0.0);
                    geom.read(br);
                    geomList.add(geom);
                } else if (word.equalsIgnoreCase("Circle")) {
                    Geom geom = new Circle(0.0, 0.0);
                    geom.read(br);
                    geomList.add(geom);
                }
                br.reset();
            }
        } catch (IOException ex) {
            System.out.println("Error message" + ex.getMessage());
        }
        ////============================geometry arraylist to string===============================================
        String[] line = TextArea.getText().split("\n");
        String[] words = line[line.length - 1].split("\\s");
        if(words.length >= 4){}
        else{
        for (int i = 0; i < geomList.size(); i++) {
            TextArea.append(geomList.get(i).toString() + "\n");
        }
        }

    }//GEN-LAST:event_OpenFileMenuActionPerformed

    private void SaveFileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveFileMenuActionPerformed
        // TODO add your handling code here:
        FileDialog fd = new FileDialog(new Frame(), "save file to", FileDialog.SAVE);
        //fd.setDirectory("/Users/Santosh/Desktop");
        fd.setFile("*.txt");
        fd.setVisible(true);
        String dir = fd.getDirectory();
        String filename = fd.getFile();
        if (filename == null) {
            TextArea.append("\n you cancelled the save selection" + "\n");
        } else {
            PrintWriter printer = null;
            try {
                TextArea.append("\n You saved to the file " + filename + "\n");
                printer = new PrintWriter(new FileWriter(dir + filename));
                printer.print(TextArea.getText());
            } catch (IOException ex) {
                Logger.getLogger(MenuJFrame.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                printer.close();
            }
        }
    }//GEN-LAST:event_SaveFileMenuActionPerformed

    private void ExitFileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitFileMenuActionPerformed
        // TODO add your handling code here:
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_ExitFileMenuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MenuJFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem ExitFileMenu;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JMenuItem NewFileMenu;
    private javax.swing.JMenuItem OpenFileMenu;
    private javax.swing.JMenuItem SaveFileMenu;
    private javax.swing.JTextArea TextArea;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
